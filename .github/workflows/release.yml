name: Release

on:
  # Manual trigger with version inputs
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release version'
        required: true
        type: string
      nextVersion:
        description: 'Next development version'
        required: true
        type: string
  
  # Automatic trigger on push to main
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  
  # Automatic trigger on release creation
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    # Only run on main branch and if not triggered by a bot
    if: |
      github.ref == 'refs/heads/main' && 
      !contains(github.actor, '[bot]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: central
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Extract version from pom.xml
      id: extract_version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
        # Check if this is a SNAPSHOT version
        if [[ $VERSION == *"-SNAPSHOT" ]]; then
          echo "is_snapshot=true" >> $GITHUB_OUTPUT
          RELEASE_VERSION=${VERSION%-SNAPSHOT}
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate next development version
          IFS='.' read -ra VERSION_PARTS <<< "$RELEASE_VERSION"
          PATCH=$((${VERSION_PARTS[2]} + 1))
          NEXT_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH-SNAPSHOT"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "is_snapshot=false" >> $GITHUB_OUTPUT
          echo "release_version=$VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Determine release version
      id: versions
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "release_version=${{ github.event.inputs.releaseVersion }}" >> $GITHUB_OUTPUT
          echo "next_version=${{ github.event.inputs.nextVersion }}" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "release" ]; then
          TAG_NAME=${{ github.event.release.tag_name }}
          RELEASE_VERSION=${TAG_NAME#v}
          echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT
        elif [ "${{ steps.extract_version.outputs.is_snapshot }}" == "true" ]; then
          # Automatic release from SNAPSHOT version
          echo "release_version=${{ steps.extract_version.outputs.release_version }}" >> $GITHUB_OUTPUT
          echo "next_version=${{ steps.extract_version.outputs.next_version }}" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Update version to release
      if: steps.versions.outputs.should_release == 'true' && steps.extract_version.outputs.is_snapshot == 'true'
      run: mvn versions:set -DnewVersion=${{ steps.versions.outputs.release_version }} -B -DgenerateBackupPoms=false

    - name: Commit release version
      if: steps.versions.outputs.should_release == 'true' && steps.extract_version.outputs.is_snapshot == 'true'
      run: |
        git add pom.xml
        git commit -m "[maven-release] Release version ${{ steps.versions.outputs.release_version }}"
        git tag -a v${{ steps.versions.outputs.release_version }} -m "Release version ${{ steps.versions.outputs.release_version }}"

    - name: Build and verify
      if: steps.versions.outputs.should_release == 'true'
      run: mvn clean verify -B -Dgpg.skip=false

    - name: Deploy to Maven Central
      if: steps.versions.outputs.should_release == 'true'
      run: mvn deploy -P release -B -DskipTests
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

    - name: Update to next development version
      if: steps.versions.outputs.should_release == 'true' && steps.extract_version.outputs.is_snapshot == 'true' && github.event_name != 'release'
      run: |
        mvn versions:set -DnewVersion=${{ steps.versions.outputs.next_version }} -B -DgenerateBackupPoms=false
        git add pom.xml
        git commit -m "[maven-release] Prepare for next development iteration"

    - name: Push changes
      if: steps.versions.outputs.should_release == 'true' && steps.extract_version.outputs.is_snapshot == 'true'
      run: |
        git push origin main
        git push origin v${{ steps.versions.outputs.release_version }}

    - name: Create GitHub Release
      if: steps.versions.outputs.should_release == 'true' && github.event_name != 'release'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.versions.outputs.release_version }}
        name: Release ${{ steps.versions.outputs.release_version }}
        body: |
          ## What's Changed
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ## Maven Central
          
          The library is available on Maven Central:
          
          ### Maven
          ```xml
          <dependency>
              <groupId>io.github.nnegi88</groupId>
              <artifactId>spring-boot-error-monitor-starter</artifactId>
              <version>${{ steps.versions.outputs.release_version }}</version>
          </dependency>
          ```
          
          ### Gradle
          ```gradle
          implementation 'io.github.nnegi88:spring-boot-error-monitor-starter:${{ steps.versions.outputs.release_version }}'
          ```
          
          ## Verification
          
          - [Maven Central](https://search.maven.org/artifact/io.github.nnegi88/spring-boot-error-monitor-starter/${{ steps.versions.outputs.release_version }})
          - [Repository](https://repo1.maven.org/maven2/io/github/nnegi88/spring-boot-error-monitor-starter/${{ steps.versions.outputs.release_version }}/)
        draft: false
        prerelease: false
        generate_release_notes: true