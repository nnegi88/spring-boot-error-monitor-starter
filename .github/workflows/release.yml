name: Release to Maven Central

on:
  # Manual trigger
  workflow_dispatch:
  
  # Automatic trigger on push to main
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    # Only run on main branch
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Configure Maven Settings
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                  http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>central</id>
              <username>${{ secrets.OSSRH_USERNAME }}</username>
              <password>${{ secrets.OSSRH_TOKEN }}</password>
            </server>
            <server>
              <id>github</id>
              <username>nnegi88</username>
              <password>${{ secrets.GITHUB_TOKEN }}</password>
            </server>
          </servers>
        </settings>
        EOF
        echo "Created settings.xml with central server configuration"
        echo "Settings.xml location: ~/.m2/settings.xml"
        echo "Verifying settings.xml exists:"
        ls -la ~/.m2/settings.xml
        echo "Settings.xml content (with masked passwords):"
        cat ~/.m2/settings.xml | sed 's/<password>.*<\/password>/<password>***<\/password>/g'
        
    - name: Import GPG Key
      run: |
        echo "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}" | gpg --batch --import
        # List keys to verify import
        gpg --list-secret-keys

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Debug Secrets
      run: |
        echo "Checking if secrets are properly configured..."
        echo "Note: Secrets cannot be directly printed for security reasons"
        echo "OSSRH_USERNAME is configured: ${{ secrets.OSSRH_USERNAME != '' }}"
        echo "OSSRH_TOKEN is configured: ${{ secrets.OSSRH_TOKEN != '' }}"
        echo "MAVEN_GPG_PRIVATE_KEY is configured: ${{ secrets.MAVEN_GPG_PRIVATE_KEY != '' }}"
        echo "MAVEN_GPG_PASSPHRASE is configured: ${{ secrets.MAVEN_GPG_PASSPHRASE != '' }}"

    - name: Debug Maven Settings
      run: |
        echo "--- Checking settings.xml file ---"
        echo "Settings.xml still exists?"
        ls -la ~/.m2/settings.xml || echo "settings.xml not found!"
        echo "Content of settings.xml:"
        cat ~/.m2/settings.xml | sed 's/<password>.*<\/password>/<password>***<\/password>/g' || echo "Cannot read settings.xml"
        echo "--- Maven Effective Settings ---"
        mvn help:effective-settings -B
        echo "--------------------------------"
        echo "--- Checking for 'central' server specifically ---"
        mvn help:effective-settings -B | grep -A 10 -B 2 "central" || echo "No 'central' server found in settings"
        echo "--------------------------------"

    - name: Extract version from pom.xml
      id: version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
        # Check if this is a release version (no SNAPSHOT)
        if [[ $VERSION == *"-SNAPSHOT" ]]; then
          echo "‚ùå ERROR: Main branch should only contain release versions!"
          echo "Found SNAPSHOT version: $VERSION"
          echo "Please update pom.xml to a release version (e.g., 1.0.0)"
          exit 1
        else
          echo "is_snapshot=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Version is a release: $VERSION"
        fi

    - name: Build and verify
      run: mvn clean verify -B

    - name: Package Release Artifacts
      run: |
        mvn package -P release -B -DskipTests -Dgpg.passphrase="${{ secrets.MAVEN_GPG_PASSPHRASE }}"
        echo "‚úÖ Release artifacts built successfully!"
        echo "üì¶ Artifacts:"
        ls -la target/*.jar
        
    - name: Re-configure Maven Settings Before Deploy
      run: |
        echo "Re-creating settings.xml to ensure it has central server..."
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                  http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>central</id>
              <username>${{ secrets.OSSRH_USERNAME }}</username>
              <password>${{ secrets.OSSRH_TOKEN }}</password>
            </server>
          </servers>
        </settings>
        EOF
        echo "Verifying central server is in settings:"
        grep -A 5 "<id>central</id>" ~/.m2/settings.xml || echo "ERROR: central server not found!"
        
    - name: Deploy to Maven Central
      run: |
        # First ensure all artifacts are built and installed
        mvn install -P release -B -DskipTests -Dgpg.passphrase="${{ secrets.MAVEN_GPG_PASSPHRASE }}"
        # Then publish to Maven Central
        mvn org.sonatype.central:central-publishing-maven-plugin:0.4.0:publish -P release -B

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Maven Central
          
          The library is now available on Maven Central:
          
          ### Maven
          ```xml
          <dependency>
              <groupId>io.github.nnegi88</groupId>
              <artifactId>spring-boot-error-monitor-starter</artifactId>
              <version>${{ steps.version.outputs.version }}</version>
          </dependency>
          ```
          
          ### Gradle
          ```gradle
          implementation 'io.github.nnegi88:spring-boot-error-monitor-starter:${{ steps.version.outputs.version }}'
          ```
          
          ## Verification
          
          - [Maven Central](https://search.maven.org/artifact/io.github.nnegi88/spring-boot-error-monitor-starter/${{ steps.version.outputs.version }})
          - [Repository](https://repo1.maven.org/maven2/io/github/nnegi88/spring-boot-error-monitor-starter/${{ steps.version.outputs.version }}/)
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          target/*.jar

    - name: Release Summary
      if: success()
      run: |
        echo "‚úÖ Release version ${{ steps.version.outputs.version }} completed!"
        echo "üì¶ Artifacts built and signed successfully"
        echo "üì§ Published to Maven Central"
        echo "üè∑Ô∏è GitHub Release created with tag v${{ steps.version.outputs.version }}"
        echo ""
        echo "üìç The library will be available on Maven Central shortly:"
        echo "   https://search.maven.org/artifact/io.github.nnegi88/spring-boot-error-monitor-starter/${{ steps.version.outputs.version }}"